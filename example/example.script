function init(self)

	if not font then
		print("'font' not found")
		return
	end

	local ttf = "/assets/fonts/Roboto/Roboto-Bold.ttf"
	local fontc_hash, err = font.load_font("/assets/fonts/roboto.fontc", ttf)
	if err ~= nil then
		print("Result:", fontc_hash, err)
	end

	local fontc_outline_hash, err = font.load_font("/assets/fonts/roboto_outline.fontc", ttf)
	if err ~= nil then
		print("Result:", fontc_outline_hash, err)
	end

	local fontc_outline_shadow_hash, err = font.load_font("/assets/fonts/roboto_outline_shadow.fontc", ttf)
	if err ~= nil then
		print("Result:", fontc_outline_shadow_hash, err)
	end

	self.font = fontc_hash
	self.font_outline = fontc_outline_hash
	self.font_outline_shadow = fontc_outline_shadow_hash

	local chars = " !\n\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

	font.add_glyphs(self.font, chars)
	local request = font.add_glyphs(self.font_outline, chars, function (self, id, result, errmsg)
			if not result then
				print("Request " .. id .." finished with error:", errmsg)
			else
				print("Request " .. id .." finished successfully")
			end
		end)
	print("Asynchronous request id:", request)

	font.add_glyphs(self.font_outline_shadow, chars)
end

function final(self)
	if font ~= nil then
		font.remove_glyphs(self.font, "DEFdef")
		font.unload_font(self.font)
		font.unload_font(self.font_outline)
		font.unload_font(self.font_outline_shadow)
	end
end
