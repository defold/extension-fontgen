local function add_glyph_callback(self, id, result, errmsg)
	if not result then
		print("Request " .. id .." finished with error:", errmsg)
	else
		print("Request " .. id .." finished successfully")
	end
end

function init(self)
	if not fontgen then
		print("'fontgen' not found")
		return
	end

	msg.post(".", "acquire_input_focus")
	
	local ttf = "/assets/fonts/Roboto/Roboto-Bold.ttf"
	local fontc_hash, err = fontgen.load_font("/assets/fonts/roboto.fontc", ttf)
	if err ~= nil then
		print("Result:", fontc_hash, err)
	end

	local fontc_outline_hash, err = fontgen.load_font("/assets/fonts/roboto_outline.fontc", ttf)
	if err ~= nil then
		print("Result:", fontc_outline_hash, err)
	end

	local fontc_outline_shadow_hash, err = fontgen.load_font("/assets/fonts/roboto_outline_shadow.fontc", ttf)
	if err ~= nil then
		print("Result:", fontc_outline_shadow_hash, err)
	end

	self.font = fontc_hash
	self.font_outline = fontc_outline_hash
	self.font_outline_shadow = fontc_outline_shadow_hash

	self.chars = " !\n\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

	fontgen.add_glyphs(self.font, self.chars, add_glyph_callback)
	local request = fontgen.add_glyphs(self.font_outline, self.chars, add_glyph_callback)
	print("Asynchronous request id:", request)

	fontgen.add_glyphs(self.font_outline_shadow, self.chars, add_glyph_callback)
end

function final(self)
	if font ~= nil then
		fontgen.remove_glyphs(self.font, "DEFdef")
		fontgen.unload_font(self.font)
		fontgen.unload_font(self.font_outline)
		fontgen.unload_font(self.font_outline_shadow)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		print("Removing all chars")
		fontgen.remove_glyphs(self.font, self.chars)
		fontgen.remove_glyphs(self.font_outline, self.chars)
		fontgen.remove_glyphs(self.font_outline_shadow, self.chars)
		print("Adding all chars")
		fontgen.add_glyphs(self.font, self.chars, add_glyph_callback)
		fontgen.add_glyphs(self.font_outline, self.chars, add_glyph_callback)
		fontgen.add_glyphs(self.font_outline_shadow, self.chars, add_glyph_callback)
	end
end
